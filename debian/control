Source: antlr3
Section: java
Priority: optional
Maintainer: Debian Java Maintainers <pkg-java-maintainers@lists.alioth.debian.org>
Uploaders: Ludovic Claude <ludovic.claude@laposte.net>,
           Emmanuel Bourg <ebourg@apache.org>,
           Jakub Adam <jakub.adam@ktknet.cz>
Build-Depends: ant,
               bnd (>= 2.1.0),
               cdbs,
               debhelper (>= 10),
               default-jdk,
               junit4,
               libmaven-install-plugin-java,
               libmaven-plugin-testing-java,
               libmaven-plugin-tools-java,
               libstringtemplate-java (>= 3.2.1),
               libstringtemplate4-java (>= 4.0.8),
               maven-debian-helper (>= 1.1),
               zip
Standards-Version: 4.6.1
Vcs-Git: https://salsa.debian.org/java-team/antlr3.git
Vcs-Browser: https://salsa.debian.org/java-team/antlr3
Homepage: http://www.antlr3.org

Package: antlr3
Architecture: all
Depends: default-jre-headless | java7-runtime-headless,
         libantlr3-runtime-java (= ${source:Version}),
         libstringtemplate4-java,
         ${misc:Depends}
Recommends: ${maven:OptionalDepends}
Breaks: jython (<< 2.5.3-7~)
Description: language tool for constructing recognizers, compilers etc
 ANTLR, ANother Tool for Language Recognition, (formerly PCCTS) is
 a language tool that provides a framework for constructing recognizers,
 compilers, and translators from grammatical descriptions containing C++
 or Java actions [You can use PCCTS 1.xx to generate C-based parsers].
 .
 Computer language translation has become a common task. While
 compilers and tools for traditional computer languages (such as C
 or Java) are still being built, their number is dwarfed by the thousands
 of mini-languages for which recognizers and translators are being
 developed. Programmers construct translators for database formats,
 graphical data files (e.g., PostScript, AutoCAD), text processing
 files (e.g., HTML, SGML).  ANTLR is designed to handle all of your
 translation tasks.

Package: antlr3-maven-plugin
Architecture: all
Depends: antlr3 (>= ${source:Version}),
         libmaven3-core-java,
         libplexus-compiler-java,
         ${misc:Depends}
Description: Maven plugin for ANTLR 3
 ANTLR, ANother Tool for Language Recognition, (formerly PCCTS) is
 a language tool that provides a framework for constructing recognizers,
 compilers, and translators from grammatical descriptions containing C++
 or Java actions [You can use PCCTS 1.xx to generate C-based parsers].
 .
 This package provides the Maven plugin that supports compiling ANTLR 3
 grammars during a Maven build

Package: libantlr3-runtime-java
Architecture: all
Depends: ${misc:Depends}
Breaks: antlr3 (<< 3.5.2-2~)
Replaces: antlr3 (<< 3.5.2-2~)
Description: Runtime library for ANTLR 3
 ANTLR, ANother Tool for Language Recognition, (formerly PCCTS) is
 a language tool that provides a framework for constructing recognizers,
 compilers, and translators from grammatical descriptions containing C++
 or Java actions [You can use PCCTS 1.xx to generate C-based parsers].
 .
 This package provides the runtime library required to run the parsers
 generated by ANTLR 3

Package: libantlr3-gunit-java
Architecture: all
Depends: antlr3 (>= ${source:Version}), junit4, ${misc:Depends}
Suggests: antlr3-gunit-maven-plugin
Description: Unit Test framework for ANTLR grammars
 gUnit is a "Unit Test" framework for ANTLR grammars. It provides a simple
 way to write and run automated tests for ANTLR grammars in a manner similar
 to Java unit testing framework jUnit. The basic idea is to create a bunch of
 input/output pairs for rules in a grammar and gUnit will verify the expected
 output/result. The input can be a single line or multiple lines of strings or
 even an external file. The output can be simply success or failure, an
 abstract syntax tree (AST), a rule return value, or some text output which
 could be a rule's template return value. The current version of gUnit has 2
 main functions, interpreter and jUnit generator. The interpreter interprets
 your gUnit script and runs unit tests using Java reflection to invoke methods
 in your parser objects. The generator, on the other hand, translates your
 gUnit script to jUnit Java code that you can compile and execute by hand.

Package: antlr3-gunit-maven-plugin
Architecture: all
Depends: libantlr3-gunit-java (>= ${source:Version}),
         libmaven3-core-java,
         libplexus-compiler-java,
         ${misc:Depends}
Description: Maven plugin for gUnit, a unit test framework for ANTLR grammars
 gUnit is a "Unit Test" framework for ANTLR grammars. It provides a simple
 way to write and run automated tests for ANTLR grammars in a manner similar
 to Java unit testing framework jUnit. The basic idea is to create a bunch of
 input/output pairs for rules in a grammar and gUnit will verify the expected
 output/result. The input can be a single line or multiple lines of strings or
 even an external file. The output can be simply success or failure, an
 abstract syntax tree (AST), a rule return value, or some text output which
 could be a rule's template return value. The current version of gUnit has 2
 main functions, interpreter and jUnit generator. The interpreter interprets
 your gUnit script and runs unit tests using Java reflection to invoke methods
 in your parser objects. The generator, on the other hand, translates your
 gUnit script to jUnit Java code that you can compile and execute by hand.
 .
 This package provides the Maven plugin that allows one to run gUnit tests
 during a Maven build.
